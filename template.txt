// UNDER CONSTRUCTION, NOTHING TO SEE HERE
//
// Package ev3 provides a Go interface for LEGO Mindstorms EV3 running ev3dev
// (http://www.ev3dev.org).
// This file is auto-generated for the spec defined at http://github.com/ev3dev/ev3dev-lang, version {{.meta.version}}, revision {{.meta.specRevision}}.
// Supported kernel: {{.meta.supportedKernel}}
package ev3

{{range $t,$v := .classes}} 
{{$T := $v.friendlyName|camel}}

{{range .description}}
// {{.|doc}}{{end}}{{with .docsLink}}
// {{.}}{{end}}
type {{$T}} struct{
	{{with $v.inheritance}}{{.|camel}}{{else}}IODevice
	{{end}}
}

// Open{{$T}} connects to a {{$v.friendlyName}}.
// The corresponding device is under
// 	/sys/class/{{$v.systemClassName}}/{{$v.systemDeviceNameConvention}}/
// where {0} is replaced to match the specified port.
func Open{{$T}}(port string) (*{{$T}}, error) { {{with $v.inheritance}} super, err := Open{{.|camel}}(port)
		if err != nil{return nil, err}
		return &{{$T}}{*super}, nil {{else}}
	io, err := OpenIODevice("{{$v.systemClassName}}", "{{$v.systemDeviceNameConvention}}", port)
	if err != nil{
		return nil, err
	}
	return &{{$T}}{IODevice:io}, nil {{end}}
}

{{range .systemProperties}}

{{$recv := $t|recv}}

{{if .writeAccess}}
{{range .description}}
// {{.|doc}}{{end}}
func ({{$recv}} *{{$T}}) Set{{.name|camel}} (x {{.type|type}}) {
	{{$recv}}.write{{.type|camel}}("{{.systemName}}", x)
}
{{end}}

{{if .readAccess}}
{{range .description}}
// {{.|doc}}{{end}}
func ({{$recv}} *{{$T}}) {{.name|camel}} () {{.type|type}}{
	return {{$recv}}.read{{.type|camel}}("{{.systemName}}")
}
{{end}}


{{end}}


{{end}}
